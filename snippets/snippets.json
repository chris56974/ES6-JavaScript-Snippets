{
  "import": {
    "prefix": "imp",
    "body": "import $2 from '$1';$0",
    "description": "Import a module using ES6 Modules"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}';$0",
    "description": "Import an ES6 module with no name"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '$1';",
    "description": "Imports only a portion of a module using ES6 modules"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${1:alias} from '${2:module}';$0",
    "description": "Import everything using its own alias using ES6 modules"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${1:originalName} as ${2:alias} } from '${3:module}';$0"
  },
  "require": {
    "prefix": "req",
    "body": "const ${1:package} = require('${1:package}');$0",
    "description": "Require a package"
  },
  "requireAlt": {
    "prefix": "reqq",
    "body": "const ${1:package} = require('${2:filePath}');$0",
    "description": "Require a package"
  },
  "moduleExports": {
    "prefix": "mex",
    "body": "module.exports = $0;",
    "description": "Module exports from Common JS"
  },
  "exportDefault": {
    "prefix": "exp",
    "body": "export default $0;"
  },
  "exportDestructing": {
    "prefix": "exd",
    "body": "export { $1 } from '${2:module}';$0"
  },
  "exportAs": {
    "prefix": "exa",
    "body": "export { ${1:originalName} as ${2:alias} } from '${3:module}'$0"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$3\n};$0\n",
    "description": "Export named function in ES6 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": "export default ($1) => {\n\t$0\n};\n",
    "description": "Export default function in ES6 syntax"
  },
  "exportClass": {
    "prefix": "ecl",
    "body": "export default class ${1:className} {\n\t$2\n};$0\n",
    "description": "Export default class in ES6 syntax"
  },
  "exportClassExtends": {
    "prefix": "ece",
    "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t${3}\n};${0}\n",
    "description": "Export default class which extends a base one in ES6 syntax"
  },
  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object})",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label})",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object})",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group(\"${1:label}\")",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Closes out the corresponding console.group()."
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "consoleLog": {
    "prefix": "cl",
    "body": "console.log($0)",
    "description": "Displays a message in the console"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1:object}', ${1:object});",
    "description": "Logs property with name."
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object})",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "consoleTime": {
    "prefix": "ctm",
    "body": "console.time('${1:object}')",
    "description": "Console time wrapper"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd('${1:object}')",
    "description": "Console time end wrapper"
  },
  "consoleTable": {
    "prefix": "clt",
    "body": "console.table(${1:object});",
    "description": "Displays tabular data as a table."
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "debugger": {
    "prefix": "de",
    "body": [
      "debugger;$1"
    ],
    "description": "Setup a debugger"
  },
  "comment.big.block": {
    "prefix": "cmmb",
    "body": [
      "/**",
      "|--------------------------------------------------",
      "| $0",
      "|--------------------------------------------------",
      "*/"
    ]
  },
  "addEventListener": {
    "prefix": "ae",
    "body": [
      "addEventListener('${1:load}', $0)"
    ],
    "description": "Code snippet for \"addEventListener\""
  },
  "querySelector": {
    "prefix": "qs",
    "body": "${1:document}.querySelector('$0')",
    "description": "Code snippet for \"querySelector\""
  },
  "querySelectAddEvent": {
    "prefix": "qsae",
    "body": [
      "${1:document}.querySelector('$2').addEventListener('${3:load}', $0)"
    ],
    "description": "Code snippet for \"querySelectorAndAddEvent\""
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": "${1:document}.querySelectorAll('$2');$0",
    "description": "Code snippet for \"querySelectorAll\""
  },
  "appendChild": {
    "prefix": "ac",
    "body": "${1:document}.appendChild($2);$0",
    "description": "Code snippet for \"appendChild\""
  },
  "removeChild": {
    "prefix": "rc",
    "body": "${1:document}.removeChild($2);$0",
    "description": "Code snippet for \"removeChild\""
  },
  "createElement": {
    "prefix": "ce",
    "body": "${1:document}.createElement('$2');$0",
    "description": "Code snippet for \"createElement\""
  },
  "createTextNode": {
    "prefix": "ctn",
    "body": "${1:document}.createTextNode('$2');$0",
    "description": "Code snippet for \"createTextNode\""
  },
  "createDocumentFragment": {
    "prefix": "cdf",
    "body": "${1:document}.createDocumentFragment();$0",
    "description": "Code snippet for \"createDocumentFragment\""
  },
  "classList.add": {
    "prefix": "ca",
    "body": "${1:document}.classList.add('${2:class}');$0",
    "description": "Code snippet for \"classList.add\""
  },
  "classList.toggle": {
    "prefix": "ct",
    "body": "${1:document}.classList.toggle('${2:class}');$0",
    "description": "Code snippet for \"classList.toggle\""
  },
  "classList.remove": {
    "prefix": "cr",
    "body": "${1:document}.classList.remove('${2:class}');$0",
    "description": "Code snippet for \"classList.remove\""
  },
  "getElementById": {
    "prefix": "gi",
    "body": "${1:document}.getElementById('${2:id}');$0",
    "description": "Code snippet for \"getElementById\""
  },
  "getElementsByClassName": {
    "prefix": "gc",
    "body": "${1:document}.getElementsByClassName('${2:class}');$0",
    "description": "Code snippet for \"getElementsByClassName\""
  },
  "getElementsByTagName": {
    "prefix": "gt",
    "body": "${1:document}.getElementsByTagName('${2:tag}');$0",
    "description": "Code snippet for \"getElementsByTagName\""
  },
  "getAttribute": {
    "prefix": "ga",
    "body": "${1:document}.getAttribute('${2:attr}');$0",
    "description": "Code snippet for \"getAttribute\""
  },
  "setAttribute": {
    "prefix": "sa",
    "body": "${1:document}.setAttribute('${2:attr}', ${3:value});$0",
    "description": "Code snippet for \"setAttribute\""
  },
  "removeAttribute": {
    "prefix": "ra",
    "body": "${1:document}.removeAttribute('${2:attr}');$0",
    "description": "Code snippet for \"removeAttribute\""
  },
  "innerHTML": {
    "prefix": "ih",
    "body": "${1:document}.innerHTML = '${2:elem}';$0",
    "description": "Code snippet for \"innerHTML\""
  },
  "textContent": {
    "prefix": "tc",
    "body": "${1:document}.textContent = '${2:content}';$0",
    "description": "Code snippet for \"textContent\""
  },
  "forEach": {
    "prefix": "fe",
    "body": "${1:array}.forEach(${2:item} => {\n\t$3\n});$0",
    "description": "Creates a forEach statement in ES6 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:array/string}) {\n\t${3://consider forin for enumerable objects}\n};$0",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${3://consider forof for iterable array/string}\n};$0",
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "afn",
    "body": "(${1:params}) => {\n\t${2}\n};$0",
    "description": "Creates an anonymous function in ES6 syntax"
  },
  "namedFunction": {
    "prefix": "fn",
    "body": "const $1 = ($2) => $0",
    "description": "Creates a named function in ES6 syntax"
  },
  "namedFunction2": {
    "prefix": "fnn",
    "body": "const $1 = ($2) => {\n\t$0\n};",
    "description": "Creates a named function in ES6 syntax"
  },
  "prototype": {
    "prefix": "pr",
    "body": [
      "${1:object}.prototype.${2:method} = (${3:arguments}) => {",
      "\t${4:// body}",
      "};$0"
    ],
    "description": "Code snippet for prototype"
  },
  "immediately-invoked function expression ES5": {
    "prefix": "iife",
    "body": [
      "(function($1) {",
      "\t$0",
      "})($1);"
    ],
    "description": "Code snippet for immediately-invoked function expression"
  },
  "immediately-invoked function expression": {
    "prefix": "iifeES6",
    "body": [
      "(($1) => {",
      "\t$0",
      "})($1);"
    ],
    "description": "Code snippet for immediately-invoked function expression"
  },
  "function call": {
    "prefix": "call",
    "body": "${1:method}.call(${2:context}, ${3:arguments});$0",
    "description": "Code snippet for function call"
  },
  "function apply": {
    "prefix": "apply",
    "body": "${1:method}.apply(${2:context}, [${3:arguments}]);$0",
    "description": "Code snippet for function apply"
  },
  "function as a property of an object": {
    "prefix": "ofn",
    "body": [
      "${1:functionName}: function(${2:arguments}) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for function as a property of an object"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${1}\n}, ${2:intervalInms});",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${1}\n}, ${2:delayInms});",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "JSON.parse": {
    "prefix": "jp",
    "body": "JSON.parse(${1:obj});$0",
    "description": "Code snippet for 'JSON.parse'"
  },
  "JSON.stringify": {
    "prefix": "js",
    "body": "JSON.stringify(${1:obj});$0",
    "description": "Code snippet for 'JSON.stringify'"
  },
  "use strict": {
    "prefix": "strict",
    "body": "'use strict';$0",
    "description": "Code snippet for 'use strict'"
  },
  "alert": {
    "prefix": "al",
    "body": "alert('${1:msg}');$0",
    "description": "Code snippet for 'alert'"
  },
  "confirm": {
    "prefix": "co",
    "body": "confirm('${1:msg}');$0",
    "description": "Code snippet for 'confirm'"
  },
  "prompt": {
    "prefix": "pm",
    "body": "prompt('${1:msg}');$0",
    "description": "Code snippet for 'prompt'"
  },
  "promise": {
    "prefix": "prom",
    "body": "const promise = new Promise((resolve, reject) => {\n\t${1}\n});$0",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "thenCatch": {
    "prefix": "thenc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n});",
    "description": "Add the .then and .catch methods to handle promises"
  },
  "promiseTC": {
    "prefix": "promtc",
    "body": "const promise = new Promise((resolve, reject) => {\n\t${1}\n}).then((${2:result}) => {\n\t${3}\n}).catch((${4:err}) => {\n\t${5}\n});$0",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const { $1} = $2;",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${1}] = ${2:array};",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "class1": {
    "prefix": "cla1",
    "body": [
      "class ${1:className} {",
      "\tconstructor(${2:firstProp}) {",
      "\t\tthis.${2:firstProp} = ${2:firstProp};",
      "\t}",
      "\t$0",
      "}"
    ],
    "description": "Create a class with a constructor. 1 prop"
  },
  "class2": {
    "prefix": "cla2",
    "body": [
      "class ${1:className} {",
      "\tconstructor(${2:firstProp}, ${3:secondProp}) {",
      "\t\tthis.${2:firstProp} = ${2:firstProp};",
      "\t\tthis.${3:secondProp} = ${3:secondProp};",
      "\t}",
      "\t$0",
      "}"
    ],
    "description": "Create a class with a constructor. 2 prop"
  },
  "class3": {
    "prefix": "cla3",
    "body": [
      "class ${1:className} {",
      "\tconstructor(${2:firstProp}, ${3:secondProp}, ${4:thirdProp}) {",
      "\t\tthis.${2:firstProp} = ${2:firstProp};",
      "\t\tthis.${3:secondProp} = ${3:secondProp};",
      "\t\tthis.${4:thirdProp} = ${4:thirdProp};",
      "\t}",
      "\t$0",
      "}"
    ],
    "description": "Create a class with a constructor. 3 prop"
  },
  "extendedClass": {
    "prefix": "clex",
    "body": [
      "class ${1:className} extends ${2:parentClass} {",
      "\tconstructor(${3:parentProps}) {",
      "\t\tsuper(${3:parentProps})",
      "\t\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Create a class with a constructor that extends another class"
  },
  "constructor": {
    "prefix": "con",
    "body": "constructor(${1:params}) {\n\t${0}\n}",
    "description": "Add default constructor in a class in ES6 syntax"
  },
  "method": {
    "prefix": "met",
    "body": "${1:methodName}(${2:params}) {\n\t${3}\n}$0",
    "description": "Creates a method inside a class in ES6 syntax"
  },
  "propertyGet": {
    "prefix": "pge",
    "body": "get ${1:propertyName}() {\n\treturn this.${0};\n}",
    "description": "Creates a getter property inside a class in ES6 syntax"
  },
  "propertyset": {
    "prefix": "pse",
    "body": "set ${1:propertyName}(${2:value}) {\n\t${0};\n}",
    "description": "Creates a setter property inside a class in ES6 syntax"
  },
  "nodeFetch": {
    "prefix": "nodefetch",
    "body": [
      "const fetch = require('node-fetch');\n",
      "fetch(${1:URL}).then(res => res.json).then(console.log)"
    ],
    "description": "Node-fetch and GET a URL "
  },
  "clientFetch": {
    "prefix": "clientfetch",
    "body": [
      "fetch('${1:URL}').then(res => res.json).then(console.log)"
    ],
    "description": "Fetch a URL"
  },
  "express": {
    "prefix": "expr",
    "body": [
      "const express = require('express')",
      "const app = express();",
      "const port = process.env.PORT || ${1:5000}\n",
      "app.get('/', (req, res) => res.send('Hey there!'));\n",
      "app.listen(port, () => { console.log(`Server has started on port \\${port\\}!!!`) });"
    ],
    "description": "Express boiler plate"
  },
  "webpack": {
    "prefix": "webpack",
    "body": [
      "const { resolve } = require('path');",
      "\nmodule.exports = {",
      "\tentry: ${1:'./src/index.js'},",
      "\toutput: {",
      "\t\tpath: ${2:'./dist}'),",
      "\t\tfilename: '${3:[name].bundle.js}'",
      "\t}",
      "\tmodule: {",
      "\t\trules: [",
      "\t\t\t{",
      "\t\t\t\ttest: /\\.${4:fileExtension}$/,",
      "\t\t\t\tuse: $0",
      "\t\t\t}",
      "\t\t]",
      "\t}",
      "};"
    ],
    "description": "A basic webpack config setup"
  },
  "gitbashagent": {
    "prefix": "gitbashssh",
    "body": [
      "eval $(ssh-agent -s)",
      "ssh-add ~/.ssh/id_rsa"
    ],
    "description": "Type this into your git-bash terminal for pushing to github"
  },
  "quokkaquery": {
    "prefix": "quokka",
    "body": "/*?*/",
    "description": "Type this to get quokka query string"
  },
  "testcase": {
    "prefix": "ita",
    "body": [
      "it('$1', async function () {",
      "\t$0",
      "})"
    ]
  },
  "AngularJSExpression": {
    "prefix": "ajs",
    "body": "{{ $0 }}"
  }
}